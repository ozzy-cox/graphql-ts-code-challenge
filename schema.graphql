scalar Date

interface Node {
  id: ID!
}

type Reaction {
  type: ReactionType!
}

interface Reactable {
  reactions: [Reaction!]!
}

interface Commentable {
  comments: [Post!]!
}

type Post implements Node & Reactable & Commentable {
  id: ID!
  createdAt: Date!
  comments(flat: Boolean = False): [Post!]!
  reactions: [Reaction!]!
  content: String!
  comment_count: Int!
  reaction_counts: [ReactionCount!]!
}

type ReactionCount{
  type: ReactionType!
  count: Int
}

enum ReactionType {
  THUMBSUP
  THUMBSDOWN
  ROCKET
  HEART
}

type Query {
  node(id: ID!): Node
  posts(offset: Int, limit: Int): [Post!]
}

type Mutation {
  post(content: String!, postId: ID): Post
  react(type: ReactionType!, postId: ID!): Post
}
